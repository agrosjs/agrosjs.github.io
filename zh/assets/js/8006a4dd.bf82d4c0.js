"use strict";(self.webpackChunkagrosjs_github_io=self.webpackChunkagrosjs_github_io||[]).push([[271],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return n?o.createElement(g,i(i({ref:t},d),{},{components:n})):o.createElement(g,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:1},i="agros update",l={unversionedId:"cli-commands/update",id:"version-0.x/cli-commands/update",title:"agros update",description:"Update project code with a source collection entity and a tar get collection entity. For example, import a service to another service and inject the source service class as an annotated dependency.",source:"@site/versioned_docs/version-0.x/cli-commands/update.md",sourceDirName:"cli-commands",slug:"/cli-commands/update",permalink:"/zh/docs/cli-commands/update",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-0.x/cli-commands/update.md",tags:[],version:"0.x",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"agros generate",permalink:"/zh/docs/cli-commands/generate"},next:{title:"agros routes",permalink:"/zh/docs/cli-commands/routes"}},s={},p=[{value:"Update Map",id:"update-map",level:2},{value:"Sub Commands",id:"sub-commands",level:2},{value:"agros update module",id:"agros-update-module",level:3},{value:"--from value",id:"--from-value",level:4},{value:"--skip-export",id:"--skip-export",level:4},{value:"--async-module",id:"--async-module",level:4},{value:"agros update component",id:"agros-update-component",level:3},{value:"agros update service",id:"agros-update-service",level:3},{value:"agros update interceptor",id:"agros-update-interceptor",level:3}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"agros-update"},"agros update"),(0,a.kt)("p",null,"Update project code with a source collection entity and a tar get collection entity. For example, import a service to another service and inject the source service class as an annotated dependency."),(0,a.kt)("p",null,"With the default official collection ",(0,a.kt)("inlineCode",{parentName:"p"},"@agros/collections"),", its help information is printed as following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Usage: agros update|u [options] [command]\n\nUpdate an Agros.js collections with another collection\n\nOptions:\n  -h, --help                        display help for command\n\nCommands:\n  component|c [options] <target>\n  interceptor|i [options] <target>\n  module|m [options] <target>\n  service|s [options] <target>\n  help [command]                    display help for command\n")),(0,a.kt)("h2",{id:"update-map"},"Update Map"),(0,a.kt)("h2",{id:"sub-commands"},"Sub Commands"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@agros/collections")," provides 4 collections: ",(0,a.kt)("inlineCode",{parentName:"p"},"component"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"interceptor"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"module")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"service"),", so the ",(0,a.kt)("inlineCode",{parentName:"p"},"agros update")," command can take these 4 collections as its sub commands. We can now dive into them to get more information about them."),(0,a.kt)("h3",{id:"agros-update-module"},"agros update module"),(0,a.kt)("p",null,"Add source entity to a proper field in ",(0,a.kt)("inlineCode",{parentName:"p"},"@Module()")," decorator of target module entity, and export it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Usage: agros update module|m [options] <target>\n\nArguments:\n  target           Target entity pathname or identifier\n\nOptions:\n  --from [value]   Source entity pathname or identifier (preset: "")\n   --skip-export   Prevent exporting the collection from this module (default: false)\n   --async-module  If the collection is a module, use this flag will asynchronously import this collection (default: false)\n  -h, --help       display help for command\n')),(0,a.kt)("p",null,"Suppose we have a source service file ",(0,a.kt)("inlineCode",{parentName:"p"},"src/modules/foo/foo.service.ts")," which exports a class named ",(0,a.kt)("inlineCode",{parentName:"p"},"FooService"),", and a target module file ",(0,a.kt)("inlineCode",{parentName:"p"},"src/modules/bar/bar.module.ts")," with the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/modules/bar/bar.module.ts",title:"src/modules/bar/bar.module.ts"},"import { Module } from '@agros/app';\n\n@Module()\nexport class BarModule {}\n")),(0,a.kt)("p",null,"We can declare ",(0,a.kt)("inlineCode",{parentName:"p"},"FooService")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"BarModule")," and declare it in ",(0,a.kt)("inlineCode",{parentName:"p"},"providers")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"exports")," fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"agros update module ./src/modules/bar/bar.module.ts --from ./src/modules/foo/foo.service.ts\n")),(0,a.kt)("p",null,"Then the content of ",(0,a.kt)("inlineCode",{parentName:"p"},"BarModule")," file will be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Module } from '@agros/app';\n// highlight-next-line\nimport { BarService } from '@modules/bar/bar.service';\n\n@Module({\n    // highlight-start\n    providers: [\n        BarService,\n    ],\n    exports: [\n        BarService,\n    ],\n    // highlight-end\n})\nexport class FooModule {}\n")),(0,a.kt)("p",null,"In the same way, we can update ",(0,a.kt)("inlineCode",{parentName:"p"},"module"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"component")," and other entities to a module."),(0,a.kt)("h4",{id:"--from-value"},"--from ","[value]"),(0,a.kt)("p",null,"The pathname of source entity. It must be specified when executing this command."),(0,a.kt)("h4",{id:"--skip-export"},"--skip-export"),(0,a.kt)("p",null,"When updating ",(0,a.kt)("inlineCode",{parentName:"p"},"component")," and other injectable entities into a module entity, Agros will add them into ",(0,a.kt)("inlineCode",{parentName:"p"},"exports")," field of ",(0,a.kt)("inlineCode",{parentName:"p"},"@module()")," decorator. If this flag is set to be ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", the entities will not be exported."),(0,a.kt)("h4",{id:"--async-module"},"--async-module"),(0,a.kt)("p",null,"When updating a module entity into another module entity, if this flag is set to be ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),",  the import declaration in root module will be like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/modules/bar/bar.module.ts",title:"src/modules/bar/bar.module.ts"},"import { Module } from '@agros/app';\n// highlight-next-line\nconst FooModule = import('@modules/foo/foo.module').then(({ FooModule }) => FooModule);\n\n@Module({\n    // ...\n    // highlight-next-line\n    imports: [FooModule],\n})\nexport class BarModule {}\n")),(0,a.kt)("h3",{id:"agros-update-component"},"agros update component"),(0,a.kt)("h3",{id:"agros-update-service"},"agros update service"),(0,a.kt)("h3",{id:"agros-update-interceptor"},"agros update interceptor"))}c.isMDXComponent=!0}}]);